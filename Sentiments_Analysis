{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyO8nvh8vghbbyKcei7J4T71",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/venkata72/Real-Time-AI-Sales-Call-Assistant/blob/main/Sentiments_Analysis\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "rEH_CGoUZ__a"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import os\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import time"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data=pd.read_csv(\"/content/sentimentdataset.csv\")"
      ],
      "metadata": {
        "id": "ANsIX_jJdcfQ"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QSuOzLd0fXsK",
        "outputId": "8672815a-3c1e-45a1-89ed-ed0e681aff0e"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(732, 15)"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['Timestamp'] = pd.to_datetime(data['Timestamp'])\n",
        "data['Day'] = data['Timestamp'].dt.day\n",
        "data['Month'] = data['Timestamp'].dt.month\n",
        "data['Year'] = data['Timestamp'].dt.year"
      ],
      "metadata": {
        "id": "jQr9EERngxZM"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['Text'] = data['Text'].str.strip()\n",
        "data['Sentiment'] = data['Sentiment'].str.strip()\n",
        "data['User'] = data['User'].str.strip()\n",
        "data['Platform'] = data['Platform'].str.strip()\n",
        "data['Hashtags'] = data['Hashtags'].str.strip()\n",
        "data['Country'] = data['Country'].str.strip()"
      ],
      "metadata": {
        "id": "crLpKZGog08D"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['Retweets'] = data['Retweets'].astype(int)\n",
        "data['Likes'] = data['Likes'].astype(int)"
      ],
      "metadata": {
        "id": "LPO4K_zPg4ez"
      },
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.drop(columns = [\"Unnamed: 0.1\",\"Unnamed: 0\"],axis = 1, inplace = True)"
      ],
      "metadata": {
        "id": "uBE07H8Zg7W7"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.isnull().sum().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lmcdBQHwg-G7",
        "outputId": "dd27e81e-6ca7-44e5-c566-7af3420b05d4"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.duplicated().value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 146
        },
        "id": "oXXfohkkhCE6",
        "outputId": "a68db275-1161-47bf-981b-a06d4ea02eaf"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False    710\n",
              "True      22\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>False</th>\n",
              "      <td>710</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>True</th>\n",
              "      <td>22</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 947
        },
        "id": "4EgHs5TahFPc",
        "outputId": "41eab194-1c62-4808-c724-803d06b67da5"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                  Text Sentiment  \\\n",
              "0                Enjoying a beautiful day at the park!  Positive   \n",
              "1                   Traffic was terrible this morning.  Negative   \n",
              "2                  Just finished an amazing workout! ðŸ’ª  Positive   \n",
              "3          Excited about the upcoming weekend getaway!  Positive   \n",
              "4          Trying out a new recipe for dinner tonight.   Neutral   \n",
              "..                                                 ...       ...   \n",
              "727  Collaborating on a science project that receiv...     Happy   \n",
              "728  Attending a surprise birthday party organized ...     Happy   \n",
              "729  Successfully fundraising for a school charity ...     Happy   \n",
              "730  Participating in a multicultural festival, cel...     Happy   \n",
              "731  Organizing a virtual talent show during challe...     Happy   \n",
              "\n",
              "              Timestamp                                 User   Platform  \\\n",
              "0   2023-01-15 12:30:00                              User123    Twitter   \n",
              "1   2023-01-15 08:45:00                            CommuterX    Twitter   \n",
              "2   2023-01-15 15:45:00                           FitnessFan  Instagram   \n",
              "3   2023-01-15 18:20:00                           AdventureX   Facebook   \n",
              "4   2023-01-15 19:55:00                             ChefCook  Instagram   \n",
              "..                  ...                                  ...        ...   \n",
              "727 2017-08-18 18:20:00      ScienceProjectSuccessHighSchool   Facebook   \n",
              "728 2018-06-22 14:15:00           BirthdayPartyJoyHighSchool  Instagram   \n",
              "729 2019-04-05 17:30:00  CharityFundraisingTriumphHighSchool    Twitter   \n",
              "730 2020-02-29 20:45:00   MulticulturalFestivalJoyHighSchool   Facebook   \n",
              "731 2020-11-15 15:15:00   VirtualTalentShowSuccessHighSchool  Instagram   \n",
              "\n",
              "                                        Hashtags  Retweets  Likes    Country  \\\n",
              "0                                  #Nature #Park        15     30        USA   \n",
              "1                              #Traffic #Morning         5     10     Canada   \n",
              "2                              #Fitness #Workout        20     40        USA   \n",
              "3                             #Travel #Adventure         8     15         UK   \n",
              "4                                 #Cooking #Food        12     25  Australia   \n",
              "..                                           ...       ...    ...        ...   \n",
              "727        #ScienceFairWinner #HighSchoolScience        20     39         UK   \n",
              "728   #SurpriseCelebration #HighSchoolFriendship        25     48        USA   \n",
              "729     #CommunityGiving #HighSchoolPhilanthropy        22     42     Canada   \n",
              "730        #CulturalCelebration #HighSchoolUnity        21     43         UK   \n",
              "731  #VirtualEntertainment #HighSchoolPositivity        24     47        USA   \n",
              "\n",
              "     Year  Month  Day  Hour  \n",
              "0    2023      1   15    12  \n",
              "1    2023      1   15     8  \n",
              "2    2023      1   15    15  \n",
              "3    2023      1   15    18  \n",
              "4    2023      1   15    19  \n",
              "..    ...    ...  ...   ...  \n",
              "727  2017      8   18    18  \n",
              "728  2018      6   22    14  \n",
              "729  2019      4    5    17  \n",
              "730  2020      2   29    20  \n",
              "731  2020     11   15    15  \n",
              "\n",
              "[732 rows x 13 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a0bd5c94-abae-4fe6-879d-603b52230779\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Text</th>\n",
              "      <th>Sentiment</th>\n",
              "      <th>Timestamp</th>\n",
              "      <th>User</th>\n",
              "      <th>Platform</th>\n",
              "      <th>Hashtags</th>\n",
              "      <th>Retweets</th>\n",
              "      <th>Likes</th>\n",
              "      <th>Country</th>\n",
              "      <th>Year</th>\n",
              "      <th>Month</th>\n",
              "      <th>Day</th>\n",
              "      <th>Hour</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Enjoying a beautiful day at the park!</td>\n",
              "      <td>Positive</td>\n",
              "      <td>2023-01-15 12:30:00</td>\n",
              "      <td>User123</td>\n",
              "      <td>Twitter</td>\n",
              "      <td>#Nature #Park</td>\n",
              "      <td>15</td>\n",
              "      <td>30</td>\n",
              "      <td>USA</td>\n",
              "      <td>2023</td>\n",
              "      <td>1</td>\n",
              "      <td>15</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Traffic was terrible this morning.</td>\n",
              "      <td>Negative</td>\n",
              "      <td>2023-01-15 08:45:00</td>\n",
              "      <td>CommuterX</td>\n",
              "      <td>Twitter</td>\n",
              "      <td>#Traffic #Morning</td>\n",
              "      <td>5</td>\n",
              "      <td>10</td>\n",
              "      <td>Canada</td>\n",
              "      <td>2023</td>\n",
              "      <td>1</td>\n",
              "      <td>15</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Just finished an amazing workout! ðŸ’ª</td>\n",
              "      <td>Positive</td>\n",
              "      <td>2023-01-15 15:45:00</td>\n",
              "      <td>FitnessFan</td>\n",
              "      <td>Instagram</td>\n",
              "      <td>#Fitness #Workout</td>\n",
              "      <td>20</td>\n",
              "      <td>40</td>\n",
              "      <td>USA</td>\n",
              "      <td>2023</td>\n",
              "      <td>1</td>\n",
              "      <td>15</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Excited about the upcoming weekend getaway!</td>\n",
              "      <td>Positive</td>\n",
              "      <td>2023-01-15 18:20:00</td>\n",
              "      <td>AdventureX</td>\n",
              "      <td>Facebook</td>\n",
              "      <td>#Travel #Adventure</td>\n",
              "      <td>8</td>\n",
              "      <td>15</td>\n",
              "      <td>UK</td>\n",
              "      <td>2023</td>\n",
              "      <td>1</td>\n",
              "      <td>15</td>\n",
              "      <td>18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Trying out a new recipe for dinner tonight.</td>\n",
              "      <td>Neutral</td>\n",
              "      <td>2023-01-15 19:55:00</td>\n",
              "      <td>ChefCook</td>\n",
              "      <td>Instagram</td>\n",
              "      <td>#Cooking #Food</td>\n",
              "      <td>12</td>\n",
              "      <td>25</td>\n",
              "      <td>Australia</td>\n",
              "      <td>2023</td>\n",
              "      <td>1</td>\n",
              "      <td>15</td>\n",
              "      <td>19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>727</th>\n",
              "      <td>Collaborating on a science project that receiv...</td>\n",
              "      <td>Happy</td>\n",
              "      <td>2017-08-18 18:20:00</td>\n",
              "      <td>ScienceProjectSuccessHighSchool</td>\n",
              "      <td>Facebook</td>\n",
              "      <td>#ScienceFairWinner #HighSchoolScience</td>\n",
              "      <td>20</td>\n",
              "      <td>39</td>\n",
              "      <td>UK</td>\n",
              "      <td>2017</td>\n",
              "      <td>8</td>\n",
              "      <td>18</td>\n",
              "      <td>18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>728</th>\n",
              "      <td>Attending a surprise birthday party organized ...</td>\n",
              "      <td>Happy</td>\n",
              "      <td>2018-06-22 14:15:00</td>\n",
              "      <td>BirthdayPartyJoyHighSchool</td>\n",
              "      <td>Instagram</td>\n",
              "      <td>#SurpriseCelebration #HighSchoolFriendship</td>\n",
              "      <td>25</td>\n",
              "      <td>48</td>\n",
              "      <td>USA</td>\n",
              "      <td>2018</td>\n",
              "      <td>6</td>\n",
              "      <td>22</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>729</th>\n",
              "      <td>Successfully fundraising for a school charity ...</td>\n",
              "      <td>Happy</td>\n",
              "      <td>2019-04-05 17:30:00</td>\n",
              "      <td>CharityFundraisingTriumphHighSchool</td>\n",
              "      <td>Twitter</td>\n",
              "      <td>#CommunityGiving #HighSchoolPhilanthropy</td>\n",
              "      <td>22</td>\n",
              "      <td>42</td>\n",
              "      <td>Canada</td>\n",
              "      <td>2019</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>730</th>\n",
              "      <td>Participating in a multicultural festival, cel...</td>\n",
              "      <td>Happy</td>\n",
              "      <td>2020-02-29 20:45:00</td>\n",
              "      <td>MulticulturalFestivalJoyHighSchool</td>\n",
              "      <td>Facebook</td>\n",
              "      <td>#CulturalCelebration #HighSchoolUnity</td>\n",
              "      <td>21</td>\n",
              "      <td>43</td>\n",
              "      <td>UK</td>\n",
              "      <td>2020</td>\n",
              "      <td>2</td>\n",
              "      <td>29</td>\n",
              "      <td>20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>731</th>\n",
              "      <td>Organizing a virtual talent show during challe...</td>\n",
              "      <td>Happy</td>\n",
              "      <td>2020-11-15 15:15:00</td>\n",
              "      <td>VirtualTalentShowSuccessHighSchool</td>\n",
              "      <td>Instagram</td>\n",
              "      <td>#VirtualEntertainment #HighSchoolPositivity</td>\n",
              "      <td>24</td>\n",
              "      <td>47</td>\n",
              "      <td>USA</td>\n",
              "      <td>2020</td>\n",
              "      <td>11</td>\n",
              "      <td>15</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>732 rows Ã— 13 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a0bd5c94-abae-4fe6-879d-603b52230779')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a0bd5c94-abae-4fe6-879d-603b52230779 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a0bd5c94-abae-4fe6-879d-603b52230779');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a833f33b-593e-422a-9ba9-ffbd2ae5b501\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a833f33b-593e-422a-9ba9-ffbd2ae5b501')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a833f33b-593e-422a-9ba9-ffbd2ae5b501 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_96aeed3c-bf98-4288-8cdf-02812cd918c3\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_96aeed3c-bf98-4288-8cdf-02812cd918c3 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data",
              "summary": "{\n  \"name\": \"data\",\n  \"rows\": 732,\n  \"fields\": [\n    {\n      \"column\": \"Text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 706,\n        \"samples\": [\n          \"Walking the Great Wall of China, each step a testament to ancient engineering marvels.\",\n          \"Laughter is the key to joy\\u2014attending a stand-up comedy show.\",\n          \"The fear of the unknown is keeping me up at night.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sentiment\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 191,\n        \"samples\": [\n          \"Colorful\",\n          \"Devastated\",\n          \"Touched\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Timestamp\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2010-05-15 15:30:00\",\n        \"max\": \"2023-10-22 20:45:00\",\n        \"num_unique_values\": 683,\n        \"samples\": [\n          \"2019-12-12 17:00:00\",\n          \"2018-03-10 09:45:00\",\n          \"2022-01-05 10:30:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"User\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 670,\n        \"samples\": [\n          \"NatureResilient\",\n          \"DIYEnthusiast\",\n          \"DocumentaryEnthusiastHiddenGemFinder\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Platform\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Twitter\",\n          \"Instagram\",\n          \"Facebook\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Hashtags\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 692,\n        \"samples\": [\n          \"#Heartbreak #LostLove\",\n          \"#StudyStrategies #HighSchoolExams\",\n          \"#Hopeful #SeedsOfOptimism\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Retweets\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7,\n        \"min\": 5,\n        \"max\": 40,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          18,\n          17,\n          15\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Likes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 10,\n        \"max\": 80,\n        \"num_unique_values\": 38,\n        \"samples\": [\n          31,\n          51,\n          25\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 33,\n        \"samples\": [\n          \"Scotland\",\n          \"Portugal\",\n          \"Norway\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          2016,\n          2018,\n          2023\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Month\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          10,\n          7,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Day\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 31,\n        \"samples\": [\n          7,\n          30,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Hour\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 0,\n        \"max\": 23,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          12,\n          20,\n          13\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sten = data[\"Sentiment\"].value_counts().head(20).reset_index()\n",
        "sen = pd.DataFrame(sten)\n",
        "sen"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 676
        },
        "id": "vpM8AStohJdD",
        "outputId": "91a7af23-0a43-4d8d-e2fa-f17e5ab80906"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Sentiment  count\n",
              "0      Positive     45\n",
              "1           Joy     44\n",
              "2    Excitement     37\n",
              "3   Contentment     19\n",
              "4       Neutral     18\n",
              "5     Gratitude     18\n",
              "6     Curiosity     16\n",
              "7      Serenity     15\n",
              "8         Happy     14\n",
              "9     Nostalgia     11\n",
              "10      Despair     11\n",
              "11        Grief      9\n",
              "12          Awe      9\n",
              "13          Sad      9\n",
              "14      Hopeful      9\n",
              "15   Loneliness      9\n",
              "16  Embarrassed      8\n",
              "17   Acceptance      8\n",
              "18    Confusion      8\n",
              "19     Euphoria      7"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-23199b5d-bf80-4125-913a-c79194e948e3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Sentiment</th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Positive</td>\n",
              "      <td>45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Joy</td>\n",
              "      <td>44</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Excitement</td>\n",
              "      <td>37</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Contentment</td>\n",
              "      <td>19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Neutral</td>\n",
              "      <td>18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Gratitude</td>\n",
              "      <td>18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Curiosity</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Serenity</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Happy</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Nostalgia</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Despair</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Grief</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Awe</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Sad</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Hopeful</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>Loneliness</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Embarrassed</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>Acceptance</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>Confusion</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Euphoria</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-23199b5d-bf80-4125-913a-c79194e948e3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-23199b5d-bf80-4125-913a-c79194e948e3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-23199b5d-bf80-4125-913a-c79194e948e3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9fad2501-0a47-428c-aa84-6d32c6f94996\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9fad2501-0a47-428c-aa84-6d32c6f94996')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9fad2501-0a47-428c-aa84-6d32c6f94996 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_9aa6c0bd-d31c-4569-8451-9b5505144f7a\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('sen')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_9aa6c0bd-d31c-4569-8451-9b5505144f7a button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('sen');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "sen",
              "summary": "{\n  \"name\": \"sen\",\n  \"rows\": 20,\n  \"fields\": [\n    {\n      \"column\": \"Sentiment\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 20,\n        \"samples\": [\n          \"Positive\",\n          \"Acceptance\",\n          \"Loneliness\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11,\n        \"min\": 7,\n        \"max\": 45,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          8,\n          9,\n          45\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.bar(sen['Sentiment'],sen['count'], color='skyblue')\n",
        "plt.xlabel('Sentiment')\n",
        "plt.ylabel('Count')\n",
        "plt.title('Top sentiments')\n",
        "plt.xticks(rotation=45)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 532
        },
        "id": "5FWBscM_hQ3g",
        "outputId": "f44fce2b-06ca-4e64-e69b-e9c7bb198132"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['Platform'].value_counts().plot(kind='pie', autopct='%1.1f%%')\n",
        "plt.title('Percentages of Platforms')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 428
        },
        "id": "X9KmMfbxhVib",
        "outputId": "15f8ea88-0eb7-45ab-a148-0ce1882262ab"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['Country'].value_counts().nlargest(10).plot(kind='pie')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "m7xIne_1hY7z",
        "outputId": "682692eb-0517-4d1c-cb5e-5df85ae35216"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: ylabel='count'>"
            ]
          },
          "metadata": {},
          "execution_count": 31
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "k = data.groupby('Year')['Likes'].sum().reset_index()\n",
        "ly = pd.DataFrame(k)\n",
        "ly"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 488
        },
        "id": "91ZGbQqmhcEz",
        "outputId": "d5311056-abba-4e3d-b230-df02bf1b9af5"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Year  Likes\n",
              "0   2010    160\n",
              "1   2011    185\n",
              "2   2012    160\n",
              "3   2013    175\n",
              "4   2014    160\n",
              "5   2015    859\n",
              "6   2016   1661\n",
              "7   2017   1785\n",
              "8   2018   2505\n",
              "9   2019   3224\n",
              "10  2020   2917\n",
              "11  2021   2648\n",
              "12  2022   2737\n",
              "13  2023  12228"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-43188aad-6828-4345-9071-f89cfc5ec310\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>Likes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2010</td>\n",
              "      <td>160</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2011</td>\n",
              "      <td>185</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2012</td>\n",
              "      <td>160</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2013</td>\n",
              "      <td>175</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2014</td>\n",
              "      <td>160</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2015</td>\n",
              "      <td>859</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>2016</td>\n",
              "      <td>1661</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>2017</td>\n",
              "      <td>1785</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>2018</td>\n",
              "      <td>2505</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>2019</td>\n",
              "      <td>3224</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>2020</td>\n",
              "      <td>2917</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>2021</td>\n",
              "      <td>2648</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>2022</td>\n",
              "      <td>2737</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>2023</td>\n",
              "      <td>12228</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-43188aad-6828-4345-9071-f89cfc5ec310')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-43188aad-6828-4345-9071-f89cfc5ec310 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-43188aad-6828-4345-9071-f89cfc5ec310');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8b470959-80a3-4282-a007-7011021aaffc\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8b470959-80a3-4282-a007-7011021aaffc')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8b470959-80a3-4282-a007-7011021aaffc button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_fe5d2e2a-e063-4438-9481-2f87da6fb673\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('ly')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_fe5d2e2a-e063-4438-9481-2f87da6fb673 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('ly');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "ly",
              "summary": "{\n  \"name\": \"ly\",\n  \"rows\": 14,\n  \"fields\": [\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          2019,\n          2021,\n          2010\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Likes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3108,\n        \"min\": 160,\n        \"max\": 12228,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          2737,\n          2648,\n          160\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize = (8,6))\n",
        "sns.lineplot(x = \"Year\", y = \"Likes\", data = ly, marker = \"o\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "ot8N3DVuhfGV",
        "outputId": "08858729-30ef-4356-8214-ddbc098c5124"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAskAAAINCAYAAADMTOJPAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAVrNJREFUeJzt3Xl4lNX9/vF7JpNM1klCIAmBAMGFXVBQCCpIRaIiStValSoiLlVoRdqq1IqitShqW3fU+gX9Va1alyoqSlmrREQE2SNKNImYsCSZyZ5Znt8fIQNZgCQks2Ter+uai2SeMzOf5wjk5ngWk2EYhgAAAAB4mf1dAAAAABBoCMkAAABAI4RkAAAAoBFCMgAAANAIIRkAAABohJAMAAAANEJIBgAAABohJAMAAACNWPxdQGfh8Xi0Z88excXFyWQy+bscAAAANGIYhsrKypSWliaz+ehjxYTkdrJnzx6lp6f7uwwAAAAcQ35+vnr27HnUNoTkdhIXFyeprtNtNpufqwEAAEBjDodD6enp3tx2NITkdlI/xcJmsxGSAQAAAlhLpsaycA8AAABohJAMAAAANEJIBgAAABohJAMAAACNEJIBAACARgjJAAAAQCOEZAAAAKARQjIAAADQCCEZAAAAaISQDAAAADRCSAYAAAAaISQDAAAAjRCSAQAAgEYIyQAAAEAjhGQAAAD4XFWtS7Uujw6U16jW5VFlrcvfJTVg8XcBAAAACC01TrcWrt6tRWtz5ahyyRZl0bTRGbr1nBNkDQ/zd3mSCMkAAADwoapalxau3q3Hl+/yPueocnm/v3lsX0VH+D+iMt0CAAAAPhNmNmvR2txmry1amyuLOTDiaWBUAQAAgJBQVu2Uo6r5+ceOKpfKqp0+rqh5hGQAAAD4TFxkuGxRzU+nsEVZFBcZ7uOKmkdIBgAAgM+4PR5NG53R7LVpozPk8nh8XFHz/BqS16xZo0mTJiktLU0mk0nvvvuu95rT6dSdd96pIUOGKCYmRmlpabr22mu1Z8+eBu9RXFysKVOmyGazKSEhQdOnT1d5eXmDNps3b9bZZ5+tyMhIpaena8GCBU1qefPNN9W/f39FRkZqyJAh+vDDDzvkngEAAEJZVIRFt55zgn577oneEWVblEW3nXuSbj3nhIBYtCf5OSRXVFRo6NChevrpp5tcq6ys1FdffaV77rlHX331ld5++23l5OTo4osvbtBuypQp2rZtm5YtW6YlS5ZozZo1uummm7zXHQ6HJkyYoN69e2vDhg165JFHdN999+n555/3tlm7dq2uuuoqTZ8+XRs3btTkyZM1efJkbd26teNuHgAAIERZw8N09ond9Pmcc7Xuj+fqy7vP081j+wbM9m+SZDIMw/B3EZJkMpn0zjvvaPLkyUdss379ep1xxhn64Ycf1KtXL+3YsUMDBw7U+vXrNWLECEnS0qVLdeGFF6qgoEBpaWl69tlndffdd6uwsFARERGSpLvuukvvvvuudu7cKUn65S9/qYqKCi1ZssT7WaNGjdKwYcO0cOHCFtXvcDgUHx8vu90um83Wxl4AAAAIDec+tkollU69OHWETu2V6JPPbE1eC6o5yXa7XSaTSQkJCZKk7OxsJSQkeAOyJI0fP15ms1nr1q3zthkzZow3IEtSVlaWcnJyVFJS4m0zfvz4Bp+VlZWl7OzsDr4jAACA0OPxGMovqVJxRa2SYqz+LqdZgTHpowWqq6t155136qqrrvIm/8LCQiUnJzdoZ7FY1KVLFxUWFnrbZGQ0nByekpLivZaYmKjCwkLvc4e3qX+P5tTU1Kimpsb7vcPhaPvNAQAAhJB9B4+iDjOb1D0h0t/lNCsoRpKdTqeuuOIKGYahZ5991t/lSJLmz5+v+Ph47yM9Pd3fJQEAAASFvOJKSVL3+EiFhwVmHA3Mqg5TH5B/+OEHLVu2rMH8kdTUVO3du7dBe5fLpeLiYqWmpnrbFBUVNWhT//2x2tRfb86cOXNkt9u9j/z8/LbfJAAAQAjJPxiSe3WJ9nMlRxbQIbk+IO/atUv//e9/lZSU1OB6ZmamSktLtWHDBu9zK1askMfj0ciRI71t1qxZI6fz0Okty5YtU79+/ZSYmOhts3z58gbvvWzZMmVmZh6xNqvVKpvN1uABAACAY8sjJB9deXm5Nm3apE2bNkmScnNztWnTJuXl5cnpdOryyy/Xl19+qVdeeUVut1uFhYUqLCxUbW2tJGnAgAE6//zzdeONN+qLL77QZ599ppkzZ+rKK69UWlqaJOnqq69WRESEpk+frm3btun111/X448/rtmzZ3vruO2227R06VI99thj2rlzp+677z59+eWXmjlzps/7BAAAoLOrD8npARySZfjRypUrDUlNHlOnTjVyc3ObvSbJWLlypfc9Dhw4YFx11VVGbGysYbPZjGnTphllZWUNPufrr782zjrrLMNqtRo9evQwHnrooSa1vPHGG8bJJ59sREREGIMGDTI++OCDVt2L3W43JBl2u71NfQEAABAqfvHsWqP3nUuM/2z60aef25q8FjD7JAc79kkGAABomVF/Wa5CR7XeuXW0z/ZIljrxPskAAAAIbtVOtwod1ZKYkwwAAABIkn4srZIkxUSEqUtMxDFa+w8hGQAAAD5z+KI9k8nk52qOjJAMAAAAnykIhp0tREgGAACAD3lHkhMJyQAAAICkww8SifJzJUdHSAYAAIDP5BfXLdzrlcRIMgAAACDDMJTPdAsAAADgEHuVU2U1LklST0IyAAAAcGg+crc4q6IiwvxczdERkgEAAOAThxbtBfYoskRIBgAAgI94F+0RkgEAAIA6h/ZIDuzt3yRCMgAAAHykoCQ4TtuTCMkAAADwkbwgOZJaIiQDAADAB9weQz+WMCcZAAAA8PrJXiWXx1BEmFkptkh/l3NMhGQAAAB0uPqpFj0SoxRmNvm5mmMjJAMAAKDDFRzc/i0Y5iNLhGQAAAD4QDBt/yYRkgEAAOADwXTankRIBgAAgA/klxCSAQAAgAbyg2iPZImQDAAAgA5WWevS/vJaSYRkAAAAQJKUf3BnC1ukRfFR4X6upmUIyQAAAOhQ3kV7ScExiiwRkgEAANDB8oNsZwuJkAwAAIAOdmiPZEIyAAAAIEkqKAmunS0kQjIAAAA6WLAdJCIRkgEAANCBDMPw7m7BSDIAAAAgaX95raqcbplMUo+EKH+X02KEZAAAAHSY+qkW3W2RirAET/QMnkoBAAAQdIJx0Z5ESAYAAEAHyjsQfIv2JEIyAAAAOpB3j2RCMgAAAFAnv4SRZAAAAKCBQ9u/Bc/OFhIhGQAAAB2k1uXRT/bg2yNZIiQDAACgg+wprZLHkCLDzeoWa/V3Oa1CSAYAAECH8C7aS4yWyWTyczWtQ0gGAABAhwjWRXsSIRkAAAAdJFi3f5MIyQAAAOggBcXBuWhPIiQDAACgg9SPJDPdAgAAADjo0HSL4NojWSIkAwAAoAPYq5yyVzkl1e1uEWwIyQAAAGh3+QdHkZNiIhRjtfi5mtYjJAMAAKDdFZQE784WEiEZAAAAHSCYF+1JhGQAAAB0gGBetCcRkgEAANAB8g/ukcxIMgAAAHBQ/cK9YNzZQiIkAwAAoJ15PIYKSoL3tD2JkAwAAIB2VlRWrVq3RxazSd3jI/1dTpsQkgEAANCu8g7UTbVIS4iSJSw442ZwVg0AAICAlV8S3Iv2JEIyAAAA2lmwb/8mEZIBAADQzgqKg/u0PcnPIXnNmjWaNGmS0tLSZDKZ9O677za4bhiG5s6dq+7duysqKkrjx4/Xrl27GrQpLi7WlClTZLPZlJCQoOnTp6u8vLxBm82bN+vss89WZGSk0tPTtWDBgia1vPnmm+rfv78iIyM1ZMgQffjhh+1+vwAAAKEg2E/bk/wckisqKjR06FA9/fTTzV5fsGCBnnjiCS1cuFDr1q1TTEyMsrKyVF1d7W0zZcoUbdu2TcuWLdOSJUu0Zs0a3XTTTd7rDodDEyZMUO/evbVhwwY98sgjuu+++/T8889726xdu1ZXXXWVpk+fro0bN2ry5MmaPHmytm7d2nE3DwAA0EnlBfkeyZJkMgzD8HcRkmQymfTOO+9o8uTJkupGkdPS0vS73/1Ov//97yVJdrtdKSkpWrx4sa688krt2LFDAwcO1Pr16zVixAhJ0tKlS3XhhReqoKBAaWlpevbZZ3X33XersLBQERERkqS77rpL7777rnbu3ClJ+uUvf6mKigotWbLEW8+oUaM0bNgwLVy4sEX1OxwOxcfHy263y2aztVe3AAAABJVqp1v971kqSdp4z3lKjInwc0WHtCavBeyc5NzcXBUWFmr8+PHe5+Lj4zVy5EhlZ2dLkrKzs5WQkOANyJI0fvx4mc1mrVu3zttmzJgx3oAsSVlZWcrJyVFJSYm3zeGfU9+m/nOaU1NTI4fD0eABAAAQ6gpK6kaRY60WJUSH+7matgvYkFxYWChJSklJafB8SkqK91phYaGSk5MbXLdYLOrSpUuDNs29x+GfcaQ29debM3/+fMXHx3sf6enprb1FAACATifvsEV7JpPJz9W0XcCG5EA3Z84c2e127yM/P9/fJQEAAPhdfnH9HsnBu/2bFMAhOTU1VZJUVFTU4PmioiLvtdTUVO3du7fBdZfLpeLi4gZtmnuPwz/jSG3qrzfHarXKZrM1eAAAAIS6zrBoTwrgkJyRkaHU1FQtX77c+5zD4dC6deuUmZkpScrMzFRpaak2bNjgbbNixQp5PB6NHDnS22bNmjVyOp3eNsuWLVO/fv2UmJjobXP459S3qf8cAAAAtEx+/fZvSYTkNisvL9emTZu0adMmSXWL9TZt2qS8vDyZTCbNmjVLf/7zn/Xee+9py5Ytuvbaa5WWlubdAWPAgAE6//zzdeONN+qLL77QZ599ppkzZ+rKK69UWlqaJOnqq69WRESEpk+frm3btun111/X448/rtmzZ3vruO2227R06VI99thj2rlzp+677z59+eWXmjlzpq+7BAAAIKh1lpFkGX60cuVKQ1KTx9SpUw3DMAyPx2Pcc889RkpKimG1Wo1zzz3XyMnJafAeBw4cMK666iojNjbWsNlsxrRp04yysrIGbb7++mvjrLPOMqxWq9GjRw/joYcealLLG2+8YZx88slGRESEMWjQIOODDz5o1b3Y7XZDkmG321vXCQAAAJ2Ex+MxBt7zkdH7ziXGrqKyY7/Ax1qT1wJmn+Rgxz7JAAAg1BVX1Oq0B5ZJknY+cL4iw8P8XFFDnWKfZAAAAASX+qkWKTZrwAXk1iIkAwAAoF14F+11CfL5yCIkAwAAoJ10mkV7IiQDAACgneQfdtpesCMkAwAAoF3klzDdAgAAAGggj5FkAAAA4BCX26M9pdWSGEkGAAAAJEk/2avl9hiKsJiVHGf1dznHjZAMAACA41Y/1aJnYpTMZpOfqzl+hGQAAAAct860R7JESAYAAEA76Ex7JEuEZAAAALSD/JIqSYwkAwAAAF6Htn+L8nMl7YOQDAAAgOPWmU7bkwjJAAAAOE7lNS4VV9RKIiQDAAAAkg6NIidEh8sWGe7natoHIRkAAADHpbNt/yYRkgEAAHCcOtv2bxIhGQAAAMepsy3akwjJAAAAOE6dbY9kiZAMAACA49TZ9kiWCMkAAAA4DoZhsHAPAAAAONy+shrVuDwym6S0BEaSAQAAAO9Ui+7xUQoP6zzRsvPcCQAAAHwuv6TzTbWQCMkAAAA4DnkH6na26EyL9iRCMgAAAI4DI8kAAABAI3md8CARiZAMAACA49AZT9uTCMkAAABooxqXW4WOaklMtwAAAAAkST+WVMkwpKjwMCXFRPi7nHZFSAYAAECb5JfU7WzRq0u0TCaTn6tpX4RkAAAAtMmhRXuda/s3iZAMAACANuqsi/YkQjIAAADaqD4kd7ZFexIhGQAAAG3knW6RSEgGAAAAJB02kpxESAYAAABkr3TKUe2SJPVMZOEeAAAA4J1q0TXWqugIi5+raX+EZAAAALRafkn9or3ON4osEZIBAADQBnmdePs3iZAMAACANujM279JhGQAAAC0QWfe/k0iJAMAAKANOvNpexIhGQAAAK3k9hj6sbRKUufcI1kiJAMAAKCVCh3VcroNhYeZlGqL9Hc5HYKQDAAAgFapn2rRIyFKYWaTn6vpGIRkAAAAtEpn3/5NIiQDAACglTr7oj2JkAwAAIBW6ux7JEuEZAAAALRSZ98jWSIkAwAAoJXyig9u/8ZIMgAAACBV1bq1v7xGEiEZAAAAkCTll9RNtYiLtCg+OtzP1XQcQjIAAABaLBQW7UmEZAAAALRCKCzakwjJAAAAaIX6kNwriZAMAAAASJLyD+5s0ZkPEpEIyQAAAGgF72l7iVF+rqRjBXRIdrvduueee5SRkaGoqCidcMIJeuCBB2QYhreNYRiaO3euunfvrqioKI0fP167du1q8D7FxcWaMmWKbDabEhISNH36dJWXlzdos3nzZp199tmKjIxUenq6FixY4JN7BAAACBaGYXh3t2Dhnh89/PDDevbZZ/XUU09px44devjhh7VgwQI9+eST3jYLFizQE088oYULF2rdunWKiYlRVlaWqqurvW2mTJmibdu2admyZVqyZInWrFmjm266yXvd4XBowoQJ6t27tzZs2KBHHnlE9913n55//nmf3i8AAEAgO1BRq8pat0wmqUcnH0k2GYcPywaYiy66SCkpKXrxxRe9z1122WWKiorSP//5TxmGobS0NP3ud7/T73//e0mS3W5XSkqKFi9erCuvvFI7duzQwIEDtX79eo0YMUKStHTpUl144YUqKChQWlqann32Wd19990qLCxURESEJOmuu+7Su+++q507d7aoVofDofj4eNntdtlstnbuCQAAAP/7Kq9Elz6zVt3jI5U951x/l9NqrclrAT2SPHr0aC1fvlzffPONJOnrr7/Wp59+qgsuuECSlJubq8LCQo0fP977mvj4eI0cOVLZ2dmSpOzsbCUkJHgDsiSNHz9eZrNZ69at87YZM2aMNyBLUlZWlnJyclRSUtJsbTU1NXI4HA0eAAAAnZl3PnInn2ohSRZ/F3A0d911lxwOh/r376+wsDC53W49+OCDmjJliiSpsLBQkpSSktLgdSkpKd5rhYWFSk5ObnDdYrGoS5cuDdpkZGQ0eY/6a4mJiU1qmz9/vubNm9cOdwkAABAc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F/ZIPqRNI8kFBQU6++yztWzZsibXPv/8c40aNeq4CwMAAIBvMZJ8SJtGkidMmKDi4uImz3/22Wc6//zzj7soAAAA+F5BSd3CPUaS2xiSR40apQkTJqisrMz73Jo1a3ThhRfq3nvvbbfipLqdNH71q18pKSlJUVFRGjJkiL788kvvdcMwNHfuXHXv3l1RUVEaP368du3a1eA9iouLNWXKFNlsNiUkJGj69OkqLy9v0Gbz5s06++yzFRkZqfT0dC1YsKBd7wMAACCQ1bo82mOvD8ks3GtTSP7HP/6hXr16adKkSaqpqdHKlSs1ceJE3X///br99tvbrbiSkhKdeeaZCg8P10cffaTt27frscceU2JiorfNggUL9MQTT2jhwoVat26dYmJilJWV1eC47ClTpmjbtm1atmyZlixZojVr1uimm27yXnc4HJowYYJ69+6tDRs26JFHHtF9992n559/vt3uBQAAIJD9WFolw5Aiw83qFmv1dzl+ZzIMw2jLC2trazVx4kRVVlZq8+bNmj9/vmbOnNmuxd1111367LPPmt1uTqobRU5LS9Pvfvc7/f73v5ck2e12paSkaPHixbryyiu1Y8cODRw4UOvXr9eIESMkSUuXLtWFF16ogoICpaWl6dlnn9Xdd9+twsJC7wmCd911l959990WH47icDgUHx8vu90um83WDncPAADgO2u+2adr/+8LnZQcq2Wzx/q7nA7RmrzW4pHkzZs3N3js3LlT9913n/Lz8/WrX/1KY8aM8V5rL++9955GjBihX/ziF0pOTtapp56qF154wXs9NzdXhYWFGj9+vPe5+Ph4jRw5UtnZ2ZKk7OxsJSQkeAOyJI0fP15ms1nr1q3zthkzZkyDI7azsrKUk5OjkpKSZmurqamRw+Fo8AAAAAhWLNprqMW7WwwbNkwmk0mHDzzXf//cc8/p+eefl2EYMplMcrvd7VLc7t279eyzz2r27Nn64x//qPXr1+u3v/2tIiIiNHXqVBUWFkqSUlJSGrwuJSXFe62wsFDJyckNrlssFnXp0qVBm4yMjCbvUX/t8Okd9ebPn6958+a1y30CAAD4W34J278drsUhOTc3tyPraJbH49GIESP0l7/8RZJ06qmnauvWrVq4cKGmTp3q83oON2fOHM2ePdv7vcPhUHp6uh8rAgAAaDv2SG6oxSG5d+/eHVlHs7p3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DodD6enpys/P5xjsdkbfdhz6tmPQrx2Hvu049G3HoW+PzDAMlZWVKS0tTWbz0WcdM5LcTsxms3r27Onzz7XZbPwB6CD0bcehbzsG/dpx6NuOQ992HPq2eccaQa7Hwj0AAACgEUIyAAAA0AghOUhZrVbde++9slqt/i6l06FvOw592zHo145D33Yc+rbj0Lftg4V7AAAAQCOMJAMAAACNEJIBAACARgjJAAAAQCOEZAAAAKARQrIfzZ8/X6effrri4uKUnJysyZMnKycnp0Gb6upqzZgxQ0lJSYqNjdVll12moqKiBm1++9vfavjw4bJarRo2bFizn7V582adffbZioyMVHp6uhYsWNBRt+V3vurXVatW6ZJLLlH37t0VExOjYcOG6ZVXXunIW/M7X/6erfftt98qLi5OCQkJ7Xw3gcWXfWsYhh599FGdfPLJslqt6tGjhx588MGOujW/82Xffvzxxxo1apTi4uLUrVs3XXbZZfr+++876M78qz369euvv9ZVV12l9PR0RUVFacCAAXr88cebfNaqVat02mmnyWq16sQTT9TixYs7+vb8yld9+/bbb+u8885Tt27dZLPZlJmZqY8//tgn9xgMCMl+tHr1as2YMUOff/65li1bJqfTqQkTJqiiosLb5vbbb9f777+vN998U6tXr9aePXt06aWXNnmv66+/Xr/85S+b/RyHw6EJEyaod+/e2rBhgx555BHdd999ev755zvs3vzJV/26du1anXLKKXrrrbe0efNmTZs2Tddee62WLFnSYffmb77q23pOp1NXXXWVzj777Ha/l0Djy7697bbb9I9//EOPPvqodu7cqffee09nnHFGh9xXIPBV3+bm5uqSSy7Rz372M23atEkff/yx9u/f3+z7dAbt0a8bNmxQcnKy/vnPf2rbtm26++67NWfOHD311FPeNrm5uZo4caLGjRunTZs2adasWbrhhhs6dZjzVd+uWbNG5513nj788ENt2LBB48aN06RJk7Rx40af3m/AMhAw9u7da0gyVq9ebRiGYZSWlhrh4eHGm2++6W2zY8cOQ5KRnZ3d5PX33nuvMXTo0CbPP/PMM0ZiYqJRU1Pjfe7OO+80+vXr1/43EYA6ql+bc+GFFxrTpk1rl7qDQUf37R133GH86le/MhYtWmTEx8e3d/kBraP6dvv27YbFYjF27tzZYbUHuo7q2zfffNOwWCyG2+32Pvfee+8ZJpPJqK2tbf8bCTDH26/1br31VmPcuHHe7++44w5j0KBBDdr88pe/NLKystr5DgJXR/VtcwYOHGjMmzevfQoPcowkBxC73S5J6tKli6S6fwU6nU6NHz/e26Z///7q1auXsrOzW/y+2dnZGjNmjCIiIrzPZWVlKScnRyUlJe1UfeDqqH490mfVf04o6Mi+XbFihd588009/fTT7VdwEOmovn3//ffVt29fLVmyRBkZGerTp49uuOEGFRcXt+8NBLCO6tvhw4fLbDZr0aJFcrvdstvt+n//7/9p/PjxCg8Pb9+bCEDt1a+N/x7Nzs5u8B5S3c+w4/37Oph0VN825vF4VFZWFlI/x46GkBwgPB6PZs2apTPPPFODBw+WJBUWFioiIqLJXMyUlBQVFha2+L0LCwuVkpLS5D3qr3VmHdmvjb3xxhtav369pk2bdjwlB42O7NsDBw7ouuuu0+LFi2Wz2dqz7KDQkX27e/du/fDDD3rzzTf18ssva/HixdqwYYMuv/zy9ryFgNWRfZuRkaFPPvlEf/zjH2W1WpWQkKCCggK98cYb7XkLAam9+nXt2rV6/fXXddNNN3mfO9LPMIfDoaqqqva9kQDUkX3b2KOPPqry8nJdccUV7VZ/MLP4uwDUmTFjhrZu3apPP/3U36V0Kr7q15UrV2ratGl64YUXNGjQoA79rEDRkX1744036uqrr9aYMWPa/b2DQUf2rcfjUU1NjV5++WWdfPLJkqQXX3xRw4cPV05Ojvr169funxlIOrJvCwsLdeONN2rq1Km66qqrVFZWprlz5+ryyy/XsmXLZDKZ2v0zA0V79OvWrVt1ySWX6N5779WECRPasbrg5qu+ffXVVzVv3jz95z//UXJycps/qzNhJDkAzJw5U0uWLNHKlSvVs2dP7/Opqamqra1VaWlpg/ZFRUVKTU1t8funpqY2WaVd/31r3ifYdHS/1lu9erUmTZqkv/3tb7r22muPt+yg0NF9u2LFCj366KOyWCyyWCyaPn267Ha7LBaL/u///q+9biMgdXTfdu/eXRaLxRuQJWnAgAGSpLy8vOMrPsB1dN8+/fTTio+P14IFC3TqqadqzJgx+uc//6nly5dr3bp17XUbAac9+nX79u0699xzddNNN+lPf/pTg2tH+hlms9kUFRXVvjcTYDq6b+v961//0g033KA33nijydSWUEZI9iPDMDRz5ky98847WrFihTIyMhpcHz58uMLDw7V8+XLvczk5OcrLy1NmZmaLPyczM1Nr1qyR0+n0Prds2TL169dPiYmJx38jAcZX/SrVbUs0ceJEPfzww0f9X1idha/6Njs7W5s2bfI+7r//fsXFxWnTpk36+c9/3m73E0h81bdnnnmmXC6XvvvuO+9z33zzjSSpd+/ex3kXgclXfVtZWSmzueGP1bCwMEl1I/idTXv167Zt2zRu3DhNnTq12a0IMzMzG7yHVPczrLV/XwcTX/WtJL322muaNm2aXnvtNU2cOLFjbihY+XHRYMi75ZZbjPj4eGPVqlXGTz/95H1UVlZ62/z61782evXqZaxYscL48ssvjczMTCMzM7PB++zatcvYuHGjcfPNNxsnn3yysXHjRmPjxo3e3SxKS0uNlJQU45prrjG2bt1q/Otf/zKio6ON5557zqf36yu+6tcVK1YY0dHRxpw5cxp8zoEDB3x6v77kq75tLBR2t/BV37rdbuO0004zxowZY3z11VfGl19+aYwcOdI477zzfHq/vuSrvl2+fLlhMpmMefPmGd98842xYcMGIysry+jdu3eDz+os2qNft2zZYnTr1s341a9+1eA99u7d622ze/duIzo62vjDH/5g7Nixw3j66aeNsLAwY+nSpT69X1/yVd++8sorhsViMZ5++ukGbUpLS316v4GKkOxHkpp9LFq0yNumqqrKuPXWW43ExEQjOjra+PnPf2789NNPDd5n7Nixzb5Pbm6ut83XX39tnHXWWYbVajV69OhhPPTQQz66S9/zVb9OnTq12etjx4713c36mC9/zx4uFEKyL/v2xx9/NC699FIjNjbWSElJMa677rpO/Y87X/bta6+9Zpx66qlGTEyM0a1bN+Piiy82duzY4aM79a326Nd777232ffo3bt3g89auXKlMWzYMCMiIsLo27dvg8/ojHzVt0f6PT116lTf3WwAMxmGYbRi4BkAAADo9JiTDAAAADRCSAYAAAAaISQDAAAAjRCSAQAAgEYIyQAAAEAjhGQAAACgEUIyAAAA0AghGQAAAGiEkAwAnZxhGBo/fryysrKaXHvmmWeUkJCggoICP1QGAIGLkAwAnZzJZNKiRYu0bt06Pffcc97nc3Nzdccdd+jJJ59Uz5492/UznU5nu74fAPgaIRkAQkB6eroef/xx/f73v1dubq4Mw9D06dM1YcIEnXrqqbrgggsUGxurlJQUXXPNNdq/f7/3tUuXLtVZZ52lhIQEJSUl6aKLLtJ3333nvf7999/LZDLp9ddf19ixYxUZGalXXnnFH7cJAO3GZBiG4e8iAAC+MXnyZNntdl166aV64IEHtG3bNg0aNEg33HCDrr32WlVVVenOO++Uy+XSihUrJElvvfWWTCaTTjnlFJWXl2vu3Ln6/vvvtWnTJpnNZn3//ffKyMhQnz599Nhjj+nUU09VZGSkunfv7ue7BYC2IyQDQAjZu3evBg0apOLiYr311lvaunWr/ve//+njjz/2tikoKFB6erpycnJ08sknN3mP/fv3q1u3btqyZYsGDx7sDcl///vfddttt/nydgCgwzDdAgBCSHJysm6++WYNGDBAkydP1tdff62VK1cqNjbW++jfv78keadU7Nq1S1dddZX69u0rm82mPn36SJLy8vIavPeIESN8ei8A0JEs/i4AAOBbFotFFkvdX//l5eWaNGmSHn744Sbt6qdLTJo0Sb1799YLL7ygtLQ0eTweDR48WLW1tQ3ax8TEdHzxAOAjhGQACGGnnXaa3nrrLfXp08cbnA934MAB5eTk6IUXXtDZZ58tSfr00099XSYA+BzTLQAghM2YMUPFxcW66qqrtH79en333Xf6+OOPNW3aNLndbiUmJiopKUnPP/+8vv32W61YsUKzZ8/2d9kA0OEIyQAQwtLS0vTZZ5/J7XZrwoQJGjJkiGbNmqWEhASZzWaZzWb961//0oYNGzR48GDdfvvteuSRR/xdNgB0OHa3AAAAABphJBkAAABohJAMAAAANEJIBgAAABohJAMAAACNEJIBAACARgjJAAAAQCOEZAAAAKARQjIAAADQCCEZAAAAaISQDAAAADRCSAYAAAAaISQDAAAAjfx/yUqpYhZQmTAAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}